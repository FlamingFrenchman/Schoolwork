Terminals unused in grammar

    TOK_TYPE_ID
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_PARAM
    TOK_FUNCTION


State 51 conflicts: 2 shift/reduce
State 53 conflicts: 2 shift/reduce
State 54 conflicts: 2 shift/reduce
State 96 conflicts: 2 shift/reduce
State 97 conflicts: 2 shift/reduce
State 98 conflicts: 2 shift/reduce
State 99 conflicts: 2 shift/reduce
State 100 conflicts: 2 shift/reduce
State 101 conflicts: 2 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' structbody '}' ';'
    9          | TOK_STRUCT TOK_IDENT '{' '}' ';'

   10 structbody: type TOK_IDENT ';'
   11           | structbody type TOK_IDENT ';'

   12 function: type TOK_IDENT '(' parameters ')' block
   13         | type TOK_IDENT '(' ')' block

   14 parameters: type TOK_IDENT
   15           | parameters ',' type TOK_IDENT

   16 type: plaintype
   17     | TOK_VOID
   18     | TOK_ARRAY '<' plaintype '>'

   19 plaintype: TOK_INT
   20          | TOK_STRING
   21          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   22 block: '{' statements '}'
   23      | '{' '}'
   24      | ';'

   25 statements: statement
   26           | statements statement

   27 statement: vardecl
   28          | block
   29          | while
   30          | ifelse
   31          | return
   32          | expr ';'

   33 vardecl: type TOK_IDENT '=' expr ';'
   34        | type TOK_IDENT ';'

   35 while: TOK_WHILE '(' expr ')' statement

   36 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   37       | TOK_IF '(' expr ')' statement

   38 return: TOK_RETURN expr ';'
   39       | TOK_RETURN ';'

   40 expr: expr '+' expr
   41     | expr '-' expr
   42     | expr '/' expr
   43     | expr '*' expr
   44     | expr '%' expr
   45     | expr '=' expr
   46     | expr TOK_EQ expr
   47     | expr TOK_NE expr
   48     | expr '<' expr
   49     | expr TOK_LE expr
   50     | expr '>' expr
   51     | expr TOK_GE expr
   52     | '+' expr
   53     | '-' expr
   54     | TOK_NOT expr
   55     | allocator
   56     | call
   57     | '(' expr ')'
   58     | variable
   59     | constant

   60 exprs: expr
   61      | exprs ',' expr

   62 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')'
   63          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   64          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   65 call: TOK_IDENT '(' exprs ')'
   66     | TOK_IDENT '(' ')'

   67 variable: TOK_IDENT
   68         | expr '[' expr ']'
   69         | expr TOK_ARROW TOK_IDENT

   70 constant: TOK_INTCON
   71         | TOK_CHARCON
   72         | TOK_STRINGCON
   73         | TOK_NULLPTR


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 44
    '(' (40) 12 13 35 36 37 57 62 63 64 65 66
    ')' (41) 12 13 35 36 37 57 62 63 64 65 66
    '*' (42) 43
    '+' (43) 40 52
    ',' (44) 15 61
    '-' (45) 41 53
    '/' (47) 42
    ';' (59) 6 8 9 10 11 24 32 33 34 38 39
    '<' (60) 18 21 48 62 63 64
    '=' (61) 33 45
    '>' (62) 18 21 50 62 63 64
    '[' (91) 68
    ']' (93) 68
    '{' (123) 8 9 22 23
    '}' (125) 5 8 9 22 23
    error (256) 5 6
    TOK_VOID (258) 17
    TOK_INT (259) 19
    TOK_STRING (260) 20 62
    TOK_TYPE_ID (261)
    TOK_IF (262) 36 37
    TOK_ELSE (263) 36
    TOK_WHILE (264) 35
    TOK_RETURN (265) 38 39
    TOK_STRUCT (266) 8 9 21 63
    TOK_NULLPTR (267) 73
    TOK_ARRAY (268) 18 64
    TOK_ARROW (269) 69
    TOK_ALLOC (270) 62 63 64
    TOK_PTR (271) 21
    TOK_EQ (272) 46
    TOK_NE (273) 47
    TOK_LT (274)
    TOK_LE (275) 49
    TOK_GT (276)
    TOK_GE (277) 51
    TOK_NOT (278) 54
    TOK_IDENT (279) 8 9 10 11 12 13 14 15 21 33 34 63 65 66 67 69
    TOK_INTCON (280) 70
    TOK_CHARCON (281) 71
    TOK_STRINGCON (282) 72
    TOK_ROOT (283)
    TOK_BLOCK (284)
    TOK_CALL (285)
    TOK_PARAM (286)
    TOK_FUNCTION (287)
    TOK_INDEX (288)
    NO_ELSE (289)
    TOK_POS (290)
    TOK_NEG (291)


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    start (54)
        on left: 1
        on right: 0
    program (55)
        on left: 2 3 4 5 6 7
        on right: 1 2 3 4 5 6
    structdef (56)
        on left: 8 9
        on right: 2
    structbody (57)
        on left: 10 11
        on right: 8 11
    function (58)
        on left: 12 13
        on right: 3
    parameters (59)
        on left: 14 15
        on right: 12 15
    type (60)
        on left: 16 17 18
        on right: 10 11 12 13 14 15 33 34
    plaintype (61)
        on left: 19 20 21
        on right: 16 18 64
    block (62)
        on left: 22 23 24
        on right: 12 13 28
    statements (63)
        on left: 25 26
        on right: 22 26
    statement (64)
        on left: 27 28 29 30 31 32
        on right: 4 25 26 35 36 37
    vardecl (65)
        on left: 33 34
        on right: 27
    while (66)
        on left: 35
        on right: 29
    ifelse (67)
        on left: 36 37
        on right: 30
    return (68)
        on left: 38 39
        on right: 31
    expr (69)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 32 33 35 36 37 38 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 57 60 61 62 64 68 69
    exprs (70)
        on left: 60 61
        on right: 61 65
    allocator (71)
        on left: 62 63 64
        on right: 55
    call (72)
        on left: 65 66
        on right: 56
    variable (73)
        on left: 67 68 69
        on right: 58
    constant (74)
        on left: 70 71 72 73
        on right: 59


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    $end  reduce using rule 1 (start)

    structdef  go to state 26
    function   go to state 27
    type       go to state 28
    plaintype  go to state 29
    block      go to state 30
    statement  go to state 31
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42


State 5

   17 type: TOK_VOID .

    $default  reduce using rule 17 (type)


State 6

   19 plaintype: TOK_INT .

    $default  reduce using rule 19 (plaintype)


State 7

   20 plaintype: TOK_STRING .

    $default  reduce using rule 20 (plaintype)


State 8

   36 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   37       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 43


State 9

   35 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 44


State 10

   38 return: TOK_RETURN . expr ';'
   39       | TOK_RETURN . ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 45
    '('            shift, and go to state 25

    expr       go to state 46
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 11

    8 structdef: TOK_STRUCT . TOK_IDENT '{' structbody '}' ';'
    9          | TOK_STRUCT . TOK_IDENT '{' '}' ';'

    TOK_IDENT  shift, and go to state 47


State 12

   73 constant: TOK_NULLPTR .

    $default  reduce using rule 73 (constant)


State 13

   18 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 48


State 14

   62 allocator: TOK_ALLOC . '<' TOK_STRING '>' '(' expr ')'
   63          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   64          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 49


State 15

   21 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 50


State 16

   54 expr: TOK_NOT . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 51
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 17

   65 call: TOK_IDENT . '(' exprs ')'
   66     | TOK_IDENT . '(' ')'
   67 variable: TOK_IDENT .

    '('  shift, and go to state 52

    $default  reduce using rule 67 (variable)


State 18

   70 constant: TOK_INTCON .

    $default  reduce using rule 70 (constant)


State 19

   71 constant: TOK_CHARCON .

    $default  reduce using rule 71 (constant)


State 20

   72 constant: TOK_STRINGCON .

    $default  reduce using rule 72 (constant)


State 21

   52 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 53
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 22

   53 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 54
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 23

   24 block: ';' .

    $default  reduce using rule 24 (block)


State 24

   22 block: '{' . statements '}'
   23      | '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '}'            shift, and go to state 55
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type        go to state 56
    plaintype   go to state 29
    block       go to state 30
    statements  go to state 57
    statement   go to state 58
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    allocator   go to state 37
    call        go to state 38
    variable    go to state 39
    constant    go to state 40


State 25

   57 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 59
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 26

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   12 function: type . TOK_IDENT '(' parameters ')' block
   13         | type . TOK_IDENT '(' ')' block
   33 vardecl: type . TOK_IDENT '=' expr ';'
   34        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 60


State 29

   16 type: plaintype .

    $default  reduce using rule 16 (type)


State 30

   28 statement: block .

    $default  reduce using rule 28 (statement)


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   27 statement: vardecl .

    $default  reduce using rule 27 (statement)


State 33

   29 statement: while .

    $default  reduce using rule 29 (statement)


State 34

   30 statement: ifelse .

    $default  reduce using rule 30 (statement)


State 35

   31 statement: return .

    $default  reduce using rule 31 (statement)


State 36

   32 statement: expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ';'        shift, and go to state 73
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 37

   55 expr: allocator .

    $default  reduce using rule 55 (expr)


State 38

   56 expr: call .

    $default  reduce using rule 56 (expr)


State 39

   58 expr: variable .

    $default  reduce using rule 58 (expr)


State 40

   59 expr: constant .

    $default  reduce using rule 59 (expr)


State 41

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 42

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 43

   36 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   37       | TOK_IF '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 76
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 44

   35 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 77
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 45

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 46

   38 return: TOK_RETURN expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ';'        shift, and go to state 78
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 47

    8 structdef: TOK_STRUCT TOK_IDENT . '{' structbody '}' ';'
    9          | TOK_STRUCT TOK_IDENT . '{' '}' ';'

    '{'  shift, and go to state 79


State 48

   18 type: TOK_ARRAY '<' . plaintype '>'

    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 80


State 49

   62 allocator: TOK_ALLOC '<' . TOK_STRING '>' '(' expr ')'
   63          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   64          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRING  shift, and go to state 81
    TOK_STRUCT  shift, and go to state 82
    TOK_ARRAY   shift, and go to state 83


State 50

   21 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 84


State 51

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   54     | TOK_NOT expr .
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 54 (expr)]
    '>'       [reduce using rule 54 (expr)]
    $default  reduce using rule 54 (expr)


State 52

   65 call: TOK_IDENT '(' . exprs ')'
   66     | TOK_IDENT '(' . ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25
    ')'            shift, and go to state 85

    expr       go to state 86
    exprs      go to state 87
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 53

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   52     | '+' expr .
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 52 (expr)]
    '>'       [reduce using rule 52 (expr)]
    $default  reduce using rule 52 (expr)


State 54

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   53     | '-' expr .
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 53 (expr)]
    '>'       [reduce using rule 53 (expr)]
    $default  reduce using rule 53 (expr)


State 55

   23 block: '{' '}' .

    $default  reduce using rule 23 (block)


State 56

   33 vardecl: type . TOK_IDENT '=' expr ';'
   34        | type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 88


State 57

   22 block: '{' statements . '}'
   26 statements: statements . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '}'            shift, and go to state 89
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 56
    plaintype  go to state 29
    block      go to state 30
    statement  go to state 90
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 58

   25 statements: statement .

    $default  reduce using rule 25 (statements)


State 59

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   57     | '(' expr . ')'
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ')'        shift, and go to state 91
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 60

   12 function: type TOK_IDENT . '(' parameters ')' block
   13         | type TOK_IDENT . '(' ')' block
   33 vardecl: type TOK_IDENT . '=' expr ';'
   34        | type TOK_IDENT . ';'

    '='  shift, and go to state 92
    ';'  shift, and go to state 93
    '('  shift, and go to state 94


State 61

   69 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 95


State 62

   46 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 96
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 63

   47 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 97
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 64

   49 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 98
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 65

   51 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 99
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 66

   45 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 100
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 67

   40 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 101
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 68

   41 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 102
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 69

   43 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 103
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 70

   42 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 104
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 71

   44 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 105
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 72

   68 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 106
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 73

   32 statement: expr ';' .

    $default  reduce using rule 32 (statement)


State 74

   48 expr: expr '<' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 107
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 75

   50 expr: expr '>' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 108
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 76

   36 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   37       | TOK_IF '(' expr . ')' statement
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ')'        shift, and go to state 109
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 77

   35 while: TOK_WHILE '(' expr . ')' statement
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ')'        shift, and go to state 110
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 78

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)


State 79

    8 structdef: TOK_STRUCT TOK_IDENT '{' . structbody '}' ';'
    9          | TOK_STRUCT TOK_IDENT '{' . '}' ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 111

    structbody  go to state 112
    type        go to state 113
    plaintype   go to state 29


State 80

   18 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 114


State 81

   62 allocator: TOK_ALLOC '<' TOK_STRING . '>' '(' expr ')'

    '>'  shift, and go to state 115


State 82

   63 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 116


State 83

   64 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 117


State 84

   21 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 118


State 85

   66 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (call)


State 86

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   60 exprs: expr .
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    $default  reduce using rule 60 (exprs)


State 87

   61 exprs: exprs . ',' expr
   65 call: TOK_IDENT '(' exprs . ')'

    ')'  shift, and go to state 119
    ','  shift, and go to state 120


State 88

   33 vardecl: type TOK_IDENT . '=' expr ';'
   34        | type TOK_IDENT . ';'

    '='  shift, and go to state 92
    ';'  shift, and go to state 93


State 89

   22 block: '{' statements '}' .

    $default  reduce using rule 22 (block)


State 90

   26 statements: statements statement .

    $default  reduce using rule 26 (statements)


State 91

   57 expr: '(' expr ')' .

    $default  reduce using rule 57 (expr)


State 92

   33 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 121
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 93

   34 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 34 (vardecl)


State 94

   12 function: type TOK_IDENT '(' . parameters ')' block
   13         | type TOK_IDENT '(' . ')' block

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ')'         shift, and go to state 122

    parameters  go to state 123
    type        go to state 124
    plaintype   go to state 29


State 95

   69 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 69 (variable)


State 96

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   46     | expr TOK_EQ expr .
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 46 (expr)]
    '>'       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)


State 97

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   47     | expr TOK_NE expr .
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 47 (expr)]
    '>'       [reduce using rule 47 (expr)]
    $default  reduce using rule 47 (expr)


State 98

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   49     | expr TOK_LE expr .
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 49 (expr)]
    '>'       [reduce using rule 49 (expr)]
    $default  reduce using rule 49 (expr)


State 99

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   51     | expr TOK_GE expr .
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 51 (expr)]
    '>'       [reduce using rule 51 (expr)]
    $default  reduce using rule 51 (expr)


State 100

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   45     | expr '=' expr .
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 45 (expr)]
    '>'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


State 101

   40 expr: expr . '+' expr
   40     | expr '+' expr .
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 40 (expr)]
    '>'       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)


State 102

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   41     | expr '-' expr .
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 41 (expr)]
    '>'       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)


State 103

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   43     | expr '*' expr .
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 43 (expr)]
    '>'       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


State 104

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   42     | expr '/' expr .
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 42 (expr)]
    '>'       [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)


State 105

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   44     | expr '%' expr .
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 44 (expr)]
    '>'       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)


State 106

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   68         | expr '[' expr . ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75
    ']'        shift, and go to state 125


State 107

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   48     | expr '<' expr .
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 48 (expr)]
    '>'       [reduce using rule 48 (expr)]
    $default  reduce using rule 48 (expr)


State 108

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   50     | expr '>' expr .
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    '<'       [reduce using rule 50 (expr)]
    '>'       [reduce using rule 50 (expr)]
    $default  reduce using rule 50 (expr)


State 109

   36 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   37       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 56
    plaintype  go to state 29
    block      go to state 30
    statement  go to state 126
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 110

   35 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 56
    plaintype  go to state 29
    block      go to state 30
    statement  go to state 127
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 111

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 128


State 112

    8 structdef: TOK_STRUCT TOK_IDENT '{' structbody . '}' ';'
   11 structbody: structbody . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    '}'         shift, and go to state 129

    type       go to state 130
    plaintype  go to state 29


State 113

   10 structbody: type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 131


State 114

   18 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 18 (type)


State 115

   62 allocator: TOK_ALLOC '<' TOK_STRING '>' . '(' expr ')'

    '('  shift, and go to state 132


State 116

   63 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 133


State 117

   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 134


State 118

   21 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 135


State 119

   65 call: TOK_IDENT '(' exprs ')' .

    $default  reduce using rule 65 (call)


State 120

   61 exprs: exprs ',' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 136
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 121

   33 vardecl: type TOK_IDENT '=' expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ';'        shift, and go to state 137
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 122

   13 function: type TOK_IDENT '(' ')' . block

    ';'  shift, and go to state 23
    '{'  shift, and go to state 24

    block  go to state 138


State 123

   12 function: type TOK_IDENT '(' parameters . ')' block
   15 parameters: parameters . ',' type TOK_IDENT

    ')'  shift, and go to state 139
    ','  shift, and go to state 140


State 124

   14 parameters: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 141


State 125

   68 variable: expr '[' expr ']' .

    $default  reduce using rule 68 (variable)


State 126

   36 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   37       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 142

    $default  reduce using rule 37 (ifelse)


State 127

   35 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


State 128

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 9 (structdef)


State 129

    8 structdef: TOK_STRUCT TOK_IDENT '{' structbody '}' . ';'

    ';'  shift, and go to state 143


State 130

   11 structbody: structbody type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 144


State 131

   10 structbody: type TOK_IDENT . ';'

    ';'  shift, and go to state 145


State 132

   62 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 146
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 133

   63 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 147


State 134

   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 148


State 135

   21 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 21 (plaintype)


State 136

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   61 exprs: exprs ',' expr .
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75

    $default  reduce using rule 61 (exprs)


State 137

   33 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 33 (vardecl)


State 138

   13 function: type TOK_IDENT '(' ')' block .

    $default  reduce using rule 13 (function)


State 139

   12 function: type TOK_IDENT '(' parameters ')' . block

    ';'  shift, and go to state 23
    '{'  shift, and go to state 24

    block  go to state 149


State 140

   15 parameters: parameters ',' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    type       go to state 150
    plaintype  go to state 29


State 141

   14 parameters: type TOK_IDENT .

    $default  reduce using rule 14 (parameters)


State 142

   36 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 56
    plaintype  go to state 29
    block      go to state 30
    statement  go to state 151
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 143

    8 structdef: TOK_STRUCT TOK_IDENT '{' structbody '}' ';' .

    $default  reduce using rule 8 (structdef)


State 144

   11 structbody: structbody type TOK_IDENT . ';'

    ';'  shift, and go to state 152


State 145

   10 structbody: type TOK_IDENT ';' .

    $default  reduce using rule 10 (structbody)


State 146

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   62 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr . ')'
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ')'        shift, and go to state 153
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 147

   63 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 154


State 148

   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 155


State 149

   12 function: type TOK_IDENT '(' parameters ')' block .

    $default  reduce using rule 12 (function)


State 150

   15 parameters: parameters ',' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 156


State 151

   36 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 36 (ifelse)


State 152

   11 structbody: structbody type TOK_IDENT ';' .

    $default  reduce using rule 11 (structbody)


State 153

   62 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')' .

    $default  reduce using rule 62 (allocator)


State 154

   63 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 63 (allocator)


State 155

   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 157


State 156

   15 parameters: parameters ',' type TOK_IDENT .

    $default  reduce using rule 15 (parameters)


State 157

   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 158
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 158

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '/' expr
   43     | expr . '*' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQ expr
   47     | expr . TOK_NE expr
   48     | expr . '<' expr
   49     | expr . TOK_LE expr
   50     | expr . '>' expr
   51     | expr . TOK_GE expr
   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   68 variable: expr . '[' expr ']'
   69         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 61
    TOK_EQ     shift, and go to state 62
    TOK_NE     shift, and go to state 63
    TOK_LE     shift, and go to state 64
    TOK_GE     shift, and go to state 65
    '='        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '*'        shift, and go to state 69
    '/'        shift, and go to state 70
    '%'        shift, and go to state 71
    '['        shift, and go to state 72
    ')'        shift, and go to state 159
    '<'        shift, and go to state 74
    '>'        shift, and go to state 75


State 159

   64 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 64 (allocator)
